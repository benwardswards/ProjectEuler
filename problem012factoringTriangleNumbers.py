"""The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from math import sqrt
from typing import Iterator


def trianglenumber() -> Iterator[int]:
    num: int = 0
    sum: int = 0
    while True:
        sum += num
        yield sum
        num += 1


yieldTriangle = trianglenumber()


def numberOfFactors(number: int) -> int:
    """ There is a faster way to do this"""
    setOfDivsors = {1, number}
    for idiv in range(2, int(sqrt(number) + 1)):
        if number % idiv == 0:
            setOfDivsors.add(idiv)
            setOfDivsors.add(number // idiv)
    return len(setOfDivsors)


def numberOfFactors2(number: int) -> int:
    """ There is a faster way to do this"""
    setOfDivsors = {1, number}
    idiv = 2
    while idiv * idiv <= number:
        if number % idiv == 0:
            setOfDivsors.add(idiv)
            setOfDivsors.add(number // idiv)
        idiv += 1
    return len(setOfDivsors)


assert numberOfFactors2(28) == 6
assert numberOfFactors2(21) == 4
assert numberOfFactors2(1) == 1
assert numberOfFactors2(2) == 2


while True:
    triangle = next(yieldTriangle)

    if numberOfFactors2(triangle) > 500:
        print("The first triangle number with over 500 divisors is :", triangle)
        break
